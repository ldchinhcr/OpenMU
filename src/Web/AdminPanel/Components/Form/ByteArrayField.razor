@using System.Globalization
@using System.IO
@using MUnique.OpenMU.Network
@using MUnique.OpenMU.Persistence
@using System.Diagnostics.CodeAnalysis

@inherits NotifyableInputBase<byte[]>

@inject IModalService _modalService

    <div>
        <FieldLabel Text="@Label" ValueExpression="@this.ValueExpression" />
        @if (this.Value != null)
        {
            @if (this.Value.Length > 32)
            {
                <p>Kích thước hiện tại: @(this.Value.Length) bytes (<a href="download/@this.EditContext.Model.GetType()/@this.EditContext.Model.GetId()/@this.FieldIdentifier.FieldName">Tải xuống</a>)</p>
                <p>Tải tệp: <BlazorInputFile.InputFile id="@this.FieldIdentifier.FieldName" OnChange="@this.OnSelectedFile" /></p>
            }
            else
            {
                <input @bind="CurrentValueAsString" id="@this.FieldIdentifier.FieldName" class="@CssClass" />
            }
        }
        else
        {
            <p><input @bind="CurrentValueAsString" id="@this.FieldIdentifier.FieldName" class="@CssClass" placeholder="Hiện tại trống. Vui lòng nhập giá trị dưới dạng chuỗi hex hoặc tải lên một tệp." /></p>
            <p>Tải tệp: <BlazorInputFile.InputFile id="@this.FieldIdentifier.FieldName" OnChange="@this.OnSelectedFile" /></p>
        }

    </div>

@code {

    /// <summary>
    /// Gets or sets the label.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <inheritdoc />
    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out byte[] result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (value is null)
        {
            result = [];
            validationErrorMessage = null;
            return true;
        }

        var values = value.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        result = new byte[values.Length];
        int i = 0;
        foreach (var strValue in values)
        {
            if (byte.TryParse(strValue, NumberStyles.HexNumber, null, out var parsedByte))
            {
                result[i] = parsedByte;
                i++;
            }
            else
            {
                result = null;
                validationErrorMessage = "Định dạng sai. Ví dụ mong đợi: AB 03 DC";
                return false;
            }
        }

        validationErrorMessage = null;
        return true;
    }

    /// <inheritdoc />
    protected override string? FormatValueAsString(byte[]? value)
    {
        return value?.AsString();
    }

    private async Task OnSelectedFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            await using var memoryStream = new MemoryStream();
            await file.Data.CopyToAsync(memoryStream);
            this.CurrentValue = memoryStream.ToArray();
            await this._modalService.ShowMessageAsync(this.FieldIdentifier.FieldName, $"Đã tải {file.Name} với {this.CurrentValue.Length} bytes.");
        }
    }
}