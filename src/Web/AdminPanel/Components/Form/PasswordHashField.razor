@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@inherits NotifyableInputBase<string>

    <div>
      <FieldLabel Text="@Label" ValueExpression="@this.ValueExpression" />
      @if (!_isSettingNewPassword)
      {
        <div class="input-group">
          <input value="********************" id="@this.FieldIdentifier.FieldName" class="@CssClass" disabled="disabled" />
          <div class="input-group-append">
            <button type="button"  onclick="@this.OnChangePasswordClick" class="btn btn-outline-primary">Thay đổi</button>
          </div>
        </div>
      }
      else
      {
        <div class="input-group">
          <input @bind=@this.NewPassword1
                 maxlength="20"
                 type="password"
                 placeholder="Mật khẩu mới ..."/>
          <input @bind=@this.NewPassword2
                 maxlength="20"
                 type="password"
                 placeholder="Nhập lại mật khẩu ..." />
          <div class="input-group-append">
            <button type="button" onclick="@this.OnSetPasswordClick" class="btn btn-outline-primary">OK</button>
            <button type="button" onclick="@this.OnCancelClick" class="btn btn-outline-secondary">Hủy</button>
            @if (!string.IsNullOrEmpty(this._validationMessage))
            {
              <span class="text-danger">@this._validationMessage</span>
            }
          </div>
        </div>
      }

        <ValidationMessage For=@this.ValueExpression />
    </div>

@code {

    /// <summary>
    /// Flag, if the user is currently setting a new password.
    /// </summary>
    private bool _isSettingNewPassword = false;

    private string? _validationMessage;

    /// <summary>
    /// Gets or sets the label which should be displayed. If it's not explicitly provided, the component shows the
    /// Name defined in the <see cref="DisplayAttribute"/>. If there is no Name in a <see cref="DisplayAttribute"/>, it shows the property name instead.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// The password, entered first time.
    /// </summary>
    public string? NewPassword1 { get; set; }

    /// <summary>
    /// The password, entered second time.
    /// </summary>
    public string? NewPassword2 { get; set; }

    /// <inheritdoc />
    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value ?? string.Empty;
        validationErrorMessage = null;
        return true;
    }

    private void OnSetPasswordClick()
    {
        this._validationMessage = null;
        if (string.IsNullOrEmpty(this.NewPassword1) || this.NewPassword1.Length < 3)
        {
          this._validationMessage = "Nhập ít nhất 3 ký tự.";
          return;
        }

        if (this.NewPassword1 != this.NewPassword2)
        {
            this._validationMessage = "Mật khẩu không khớp.";
            return;
        }

        this._isSettingNewPassword = false;
        this.CurrentValue = BCrypt.Net.BCrypt.HashPassword(this.NewPassword1); 
        this.NewPassword1 = string.Empty;
        this.NewPassword2 = string.Empty;
    }

    private void OnChangePasswordClick()
    {
        this._validationMessage = null;
        this.NewPassword1 = string.Empty;
        this.NewPassword2 = string.Empty;
        this._isSettingNewPassword = true;
    }

    private void OnCancelClick()
    {
      this.NewPassword1 = string.Empty;
      this.NewPassword2 = string.Empty;
      this._isSettingNewPassword = false;
    }
}
