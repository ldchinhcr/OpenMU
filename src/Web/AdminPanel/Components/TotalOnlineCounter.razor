@using MUnique.OpenMU.Web.AdminPanel.Services
@using MUnique.OpenMU.Interfaces
@using System.ComponentModel

@implements IDisposable

<tr class="info">
    <td colspan="5">
        <span>Tổng số người chơi: @this.GetPlayerCount()</span>
    </td>
</tr>

@code {

    /// <summary>
    /// Lấy hoặc thiết lập các máy chủ.
    /// </summary>
    [Parameter]
    public IList<IManageableServer> Servers { get; set; } = null!;

    /// <inheritdoc />
    public void Dispose()
    {
        foreach (var server in this.Servers)
        {
            server.PropertyChanged -= this.OnServerPropertyChanged;
        }
    }

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        foreach (var server in this.Servers)
        {
            server.PropertyChanged += this.OnServerPropertyChanged;
        }
    }

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "VSTHRD100:Avoid async void methods", Justification = "Catching all Exceptions.")]
    private async void OnServerPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        try
        {
            await this.InvokeAsync(this.StateHasChanged).ConfigureAwait(false);
        }
        catch
        {
            // phải được bắt vì đây là phương thức async void.
        }
        
    }

    private int GetPlayerCount()
    {
        return this.Servers?
            .Where(s => s.Id < 0x10000
                    && s.ServerState != ServerState.Timeout)
            .Sum(s => s.CurrentConnections) ?? 0;
    }
}
